#!/bin/bash
set -euxo pipefail

# Setup according to:
# - https://developer.valvesoftware.com/wiki/SteamCMD
# - https://7daystodie.fandom.com/wiki/Linux_Server_with_Amazon_Linux_AMI

###############################################################################
# CONFIG
###############################################################################

DEVICE_NAME="sdb"
STEAM_USR="steam"
STEAM_USR_HOME_DIR="/home/steam"
CMD_NAME="7d2d_server"
GAME_BASE_DIR="$STEAM_USR_HOME_DIR/7d2d"
GAME_SAVE_DIR="$STEAM_USR_HOME_DIR/7d2d_saves"
GAME_LOG_DIR="$GAME_BASE_DIR/7DaysToDieServer_Data/logs"
GAME_TELNET_SERVER_PASSWORD_FILE="$GAME_BASE_DIR/telnet_password"

# Game config
OFFHOURS_START_TIME="02:00:00"
OFFHOURS_START_TIME_CRON="0 2 * * *" # At 02:00 (https://crontab.guru/#0_2_*_*_*)
OFFHOURS_END_TIME="17:00:00"
OFFHOURS_END_TIME_CRON="0 17 * * *" # At 17:00 (https://crontab.guru/#0_17_*_*_*)

SERVERCONFIG_DEFAULT_FILE_NAME="serverconfig_game_default.xml"
SERVERCONFIG_OFFHOURS_FILE_NAME="serverconfig_game_offhours.xml"
ADMINCONFIG_FILE_NAME="serveradmin.xml"

###############################################################################
# Install GCP Ops Agent
###############################################################################

curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh
sudo bash add-google-cloud-ops-agent-repo.sh --also-install

###############################################################################
# Install 'steamcmd' dependencies
###############################################################################
echo "INFO: Install 'steamcmd' and dependencies"

sudo dpkg --add-architecture i386
sudo apt update
sudo apt install software-properties-common -y
sudo apt install lib32gcc-s1 -y
sudo apt install lib32stdc++6 -y

###############################################################################
# Format game storage disk (if necessary) and mount it
###############################################################################
echo "INFO: Format game storage disk (if necessary) and mount it"

# Only format disk if it's not formatted yet
# https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting
if sudo blkid --match-token TYPE=ext4 "/dev/$DEVICE_NAME"; then
    echo "disk '/dev/$DEVICE_NAME' is already formatted as ext4"
else
    echo "disk '$DEVICE_NAME' isn't formatted yet, formatting it as ext4..."
    sudo mkfs.ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/$DEVICE_NAME
fi

# Mount disk to /home/steam
# https://cloud.google.com/compute/docs/disks/add-persistent-disk#mounting
if [[ $(findmnt -rno SOURCE,TARGET "/dev/$DEVICE_NAME") != $(echo "/dev/$DEVICE_NAME $STEAM_USR_HOME_DIR") ]]; then
    echo "Mounting disk '/dev/$DEVICE_NAME' at $STEAM_USR_HOME_DIR"
    sudo mkdir -p "$STEAM_USR_HOME_DIR"
    sudo mount -o discard,defaults /dev/"$DEVICE_NAME" "$STEAM_USR_HOME_DIR"
else
    echo "Disk '/dev/$DEVICE_NAME' is already mounted at $STEAM_USR_HOME_DIR"
fi

# Configure /etc/fstab
DISK_UUID=$(sudo blkid /dev/$DEVICE_NAME|sed 's~/dev/sdb: UUID="~~'|sed 's~" TYPE="ext4"~~')

if grep "$DISK_UUID" /etc/fstab; then
    echo "/etc/fstab already contains entry for disk '/dev/$DEVICE_NAME' with UUID '$DISK_UUID'"
else
    echo "/etc/fstab doesn't yet contain an entry for disk '/dev/$DEVICE_NAME' with UUID '$DISK_UUID', updating..."
    cp /etc/fstab fstab_new
    echo "UUID=$DISK_UUID $STEAM_USR_HOME_DIR ext4 discard,defaults 0 2">>fstab_new
    sudo mv fstab_new /etc/fstab 
fi

# Grant write access to the disk for all users
sudo chmod a+w "$STEAM_USR_HOME_DIR"

# Log results
sudo lsblk

###############################################################################
# Create and use user 'steam' to run 'steamcmd' with
###############################################################################
echo "INFO: Create and use user '$STEAM_USR' to run 'steamcmd' with"

# Check if user steam exists, set it up if necessary
if cut -d: -f1 /etc/passwd|grep "$STEAM_USR"; then
    echo "user '$STEAM_USR' already exists"
else
    echo "user '$STEAM_USR' doesn't exist yet, setting it up..."
    # Add user and create home directory at /home/steam
    sudo useradd -m "$STEAM_USR"

    # Create user steam without password
    sudo passwd -d "$STEAM_USR"
fi

# Switch to user steam and go to its home directory
su $STEAM_USR
cd "$STEAM_USR_HOME_DIR"

###############################################################################
# Install 'steamcmd'
###############################################################################
echo "INFO: Check/install 'steamcmd'"

# IMPORTANT: Changing this directory may require manual cleanup
mkdir -p "$STEAM_USR_HOME_DIR"/Steam
cd "$STEAM_USR_HOME_DIR"/Steam

if [[ -e steamcmd.sh ]]; then
    echo "'steamcmd.sh' already exists on disk"
else
    echo "'steamcmd.sh' doesn't exist on disk yet, downloading..."
    # Download and extract SteamCMD for Linux
      curl -sqL "https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz" | tar zxvf -
fi

ls -alF
cat steamcmd.sh

###############################################################################
# Setup game server
###############################################################################
echo "INFO: Setup game server"

cd "$STEAM_USR_HOME_DIR"
# Ensure directories exist
# IMPORTANT: Changing these directories may require manual cleanup
mkdir -p "$GAME_BASE_DIR"
mkdir -p "$GAME_SAVE_DIR"

# Link steamclient so that game server can find it
mkdir -p "$STEAM_USR_HOME_DIR"/.steam/sdk64
if [[ -L "$STEAM_USR_HOME_DIR"/.steam/sdk64/steamclient.so ]]; then
    echo "'$STEAM_USR_HOME_DIR/Steam/linux64/steamclient.so' is already linked to '$STEAM_USR_HOME_DIR/.steam/sdk64/steamclient.so'"
else
    echo "'$STEAM_USR_HOME_DIR/Steam/linux64/steamclient.so' is not yet linked to '$STEAM_USR_HOME_DIR/.steam/sdk64/steamclient.so', creating symbolic link..."
    ln -s "$STEAM_USR_HOME_DIR"/Steam/linux64/steamclient.so "$STEAM_USR_HOME_DIR"/.steam/sdk64/steamclient.so
fi

# Install/update 7D2D dedicated linux server at /home/steam/7d2d
# https://developer.valvesoftware.com/wiki/SteamCMD#Automating_SteamCMD
./Steam/steamcmd.sh +force_install_dir "$STEAM_USR_HOME_DIR"/7d2d +login anonymous +app_update 294420 valdiate +quit

mkdir -p "$GAME_LOG_DIR"

###############################################################################
# Load server configs & game server management CLI
###############################################################################

# Load server configs
echo "${SERVERCONFIG_DEFAULT}"|base64 --decode >"$GAME_BASE_DIR"/"$SERVERCONFIG_DEFAULT_FILE_NAME"
echo "${SERVERCONFIG_OFFHOURS}"|base64 --decode >"$GAME_BASE_DIR"/"$SERVERCONFIG_OFFHOURS_FILE_NAME"

# Load admin config
echo "${ADMINCONFIG}"|base64 --decode >"$GAME_SAVE_DIR"/"$ADMINCONFIG_FILE_NAME"

# Load game server management CLI
sudo echo "${SERVER_CMD_SCRIPT}"|base64 --decode >/usr/local/bin/"$CMD_NAME"
sudo chmod +x /usr/local/bin/"$CMD_NAME"

# Conditionally set game mode
current_time_sec=$(date +%X|awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
offhours_start_time_sec=$(echo "$OFFHOURS_START_TIME"|awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
offhours_end_time_sec=$(echo "$OFFHOURS_END_TIME"|awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')

if [[ "$current_time_sec" -ge "$offhours_start_time_sec" && "$current_time_sec" -lt "$offhours_end_time_sec" ]]; then
    echo "$SERVERCONFIG_OFFHOURS_FILE_NAME" >"$GAME_BASE_DIR"/serverconfig.lock
else
    echo "$SERVERCONFIG_DEFAULT_FILE_NAME" >"$GAME_BASE_DIR"/serverconfig.lock
fi

# Add cronjob to conditionally set game mode
crontab -l > newcron || true
start_offhours_cron="$OFFHOURS_START_TIME_CRON $CMD_NAME reload $SERVERCONFIG_OFFHOURS_FILE_NAME"
start_default_cron="$OFFHOURS_END_TIME_CRON $CMD_NAME reload $SERVERCONFIG_DEFAULT_FILE_NAME"

if ! cat newcron|grep "$start_offhours_cron"; then
    echo "$start_offhours_cron" >> newcron
fi

if ! cat newcron|grep "$start_default_cron"; then
    echo "$start_default_cron" >> newcron
fi

crontab newcron
rm newcron
crontab -l

###############################################################################
# Start the game
###############################################################################
# Make telnet server password available on VM
echo "${TELNET_PASSWORD}"|base64 --decode >"$GAME_TELNET_SERVER_PASSWORD_FILE"

# Ensure user steam is owner of /home/steam 
sudo chown -R "$STEAM_USR":"$STEAM_USR" "$STEAM_USR_HOME_DIR"

"$CMD_NAME" start
